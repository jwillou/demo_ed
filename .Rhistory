sum(sample(c(1,2,3,4), dice, replace=T))+(dice)
sum(sample(c(1,2,3,4), dice, replace=T))+(dice)
sum(sample(c(1,2,3,4), dice, replace=T))+(dice)
sum(sample(1:4, dice, replace=T))+(dice)
#fireball 8d6
sum(sample(1:8, 6, replace=T))
#fireball 8d6
sum(sample(1:8, 6, replace=T))
#fireball 8d6
sum(sample(1:8, 6, replace=T))
#magic missle (3d4+1 @4th lvl, +1 die per level)
dice = 7
sum(sample(1:4, dice, replace=T))+(dice)
#magic missle (3d4+1 @4th lvl, +1 die per level)
dice = 5
sum(sample(1:4, dice, replace=T))+(dice)
sample(1:20,1) #magic surge
sample(1:20,1) #magic surge
paste(sample(seq(0,100,10),1), sample(1:10,1), sep="")
paste(sample(1:10,1), sample(1:10,1), sep="")
paste(sample(0:9,1), sample(1:9,1), sep="")
sample(1:100,1)
sample(1:100,1)
#magic missle (3d4+1 @4th lvl, +1 die per level)
dice = 7
sum(sample(1:4, dice, replace=T))+(dice)
sample(1:20,1) #magic surge
sample(1:100,1)
#heal
(sample(1:6,1)+1)*2
#heal
(sample(1:6,1)+1)*2
#heal
(sample(1:6,1)+1)*2
#heal
(sample(1:6,1)+1)*2
#heal
sumrep(((sample(1:6,1)+1)*2),2))
#heal
sum(rep(((sample(1:6,1)+1)*2),2))
rep(((sample(1:6,1)+1)*2),2)
sample(1:6,1)+1)*2
sample(1:6,1)+1)*2)
sample(1:6,1)
sample(1:6,1)+1
(sample(1:6,1)+1)*2)
(sample(1:6,1)+1)*2
((sample(1:6,1)+1)*2)
rep(((sample(1:6,1)+1)*2),2)
replicate(((sample(1:6,1)+1)*2),2)
(sample(1:6,1)+1)*2
(sample(1:6,1)+1)*2
?replicate
#heal
sample(1:6,2)+1)*2)
#heal
sample(1:6,2)+1)*2
#heal
(sample(1:6,2)+1)*2
#heal
sum(c((sample(1:6,2)+1)*2))
c((sample(1:6,2)+1)*2)
c((sample(1:6,2)+1)*2)
c((sample(1:6,2)+1)*2)
c((sample(1:6,2)+1)*2)
c((sample(1:6,2)+1)*2)
#heal
npotions = 1
sum(c((sample(1:6,2)+npotions)*2))
sum(c((sample(1:6,2)+npotions)*2))
sum(c((sample(1:6,npotions)+1)*2))
sample(1:8,npotions)
sample(1:8,npotions)
#heal - doubled because of necklace
npotions = 5
sum(sample(1:8,npotions))
sum(sample(1:8,npotions))
sample(1:8,npotions)
#heal - doubled because of necklace
npotions = 5
sum(c((sample(1:6,npotions)+1)*2))
#heal - doubled because of necklace
npotions = 2
sum(c((sample(1:6,npotions)+1)*2))
#fireball 8d6
sum(sample(1:8, 6, replace=T))
sample(1:20,1) #magic surge
sample(1:20,1) #magic surge
sample(1:100,1)
#heal - doubled because of necklace
npotions = 1
sum(c((sample(1:6, replace=T, npotions)+1)*2))
#magic missle (3d4+1 @4th lvl, +1 die per level)
dice = 8
sum(sample(1:4, dice, replace=T))+(dice)
sample(1:20,1) #magic surge
sample(1:100,1)
sum(sample(1:4, dice, replace=T))+(dice)
sample(1:20,1) #magic surge
sample(1:100,1)
sum(c(sample(1:6, dice, replace=T),(dice*1))
)
sum(c(sample(1:6, dice, replace=T),(dice*1)))*2
sum(c(sample(1:6, dice, replace=T),(dice*1)))*2
sample(1:6, dice, replace=T)
#short rest - doubled because of necklace
dice = 1
sum(c(sample(1:6, dice, replace=T),(dice*1)))*2
sum(c(sample(1:6, dice, replace=T),(dice*1)))*2
#short rest - doubled because of necklace
dice = 2
sum(c(sample(1:6, dice, replace=T),(dice*1)))*2
sample(c(1:6), replace=T, n=25)
sample(c(1:6), 25, replace=T)
table(sample(c(1:6), 25, replace=T))
table(sample(c(1:6), 50, replace=T))
sample(c(1:8),1,replace=T)+4
sample(c(1:8),1,replace=T)+4
rep((sample(c(1:8),1,replace=T)+4),5)
sum(rep((sample(c(1:8),1,replace=T)+4),5))
sum(rep((sample(c(1:8),5,replace=T)+5),5))
n=5
sum(rep((sample(c(1:8),n,replace=T)+n),1))
sum(rep((sample(c(1:8),n,replace=T)+n),1))
n=i=null
n=i=NULL
n=i=NULL
while(n<75)(
i = i+1
n = n + sample(c(1:8),n,replace=T)+4
n=i=NULL
while(n<75)(
i = i+1
n = n + sample(c(1:8),1) + 4
n=0
i=NULL
while(n<75)(
i = i+1
n = n + sample(c(1:8),1) + 4
n=0
i=NULL
while(n<75){
i = i+1
n = n + sample(c(1:8),1) + 4
}
i
n=0
i=0
while(n<75){
i = i+1
n = n + sample(c(1:8),1) + 4
}
n=0
i=0
while(n<75){
i = i+1
n = n + sample(c(1:8),1) + 4
}
n=0
i=0
while(n<75){
i = i+1
n = n + sample(c(1:8),1) + 4
}
n=0
i=0
while(n<75){
i = i+1
n = n + sample(c(1:8),1) + 4
}
n=0
i=0
while(n<75){
i = i+1
n = n + sample(c(1:8),1) + 4
}
for(n in 1:1000){
n=0
i=0
while(n<75){
i = i+1
n = n + sample(c(1:8),1) + 4
}
ii = c(ii,i)}
ii=NULL
for(n in 1:1000){
n=0
i=0
ii=NULL
while(n<75){
i = i+1
n = n + sample(c(1:8),1) + 4
}
ii = c(ii,i)}
hist(ii)
ii
for(n in 1:1000){
n=0
i=0
ii=NULL
while(n<75){
i = i+1
n = n + sample(c(1:8),1) + 4
}
ii = c(ii,i)
}
ii
ii
for(nn in 1:1000){
n=0
i=0
ii=NULL
while(n<75){
i = i+1
n = n + sample(c(1:8),1) + 4
}
ii = c(ii,i)
}
i
ii
ii=NULL
ii=NULL
for(nn in 1:1000){
n=0
i=0
while(n<75){
i = i+1
n = n + sample(c(1:8),1) + 4
}
ii = c(ii,i)
}
hist(ii)
for(nn in 1:10000){
n=0
i=0
while(n<75){
i = i+1
n = n + sample(c(1:8),1) + 4
}
ii = c(ii,i)
}
hist(ii)
hist(ii, main="number of roles to get >75")
hist(ii, main="number of roles to get >75", xlab="number of roles")
#chatbook
hitpoints = 75
?
map
library(maps)
library(dplyr)
library(geosphere)
library(scales)
?map
citation('maps')
install.packages("metafor")
?escala
library(metafor)
?escala
?escalc
setwd("/Users/jannawilloughby/Google Drive/My Drive/Willoughby lab/projects - active/dolphins and turtles/demography_ed/")
#Set working directory and out directory
setwd("/Users/jannawilloughby/Google Drive/My Drive/Willoughby lab/projects - active/dolphins and turtles/demography_ed/")
directory = getwd()
outdir = paste(directory, "Output/", sep = "")
#Source function scripts
source(paste(directory, "/Source/FunctionSourcer.R", sep = ''))
#Source function scripts
source(paste(directory, "/Source/FunctionSourcer.R", sep = ''))
#Source function scripts
source(paste(directory, "/Source/FunctionSourcer.R", sep = ''))
#Source function scripts
source(paste(directory, "/Source/FunctionSourcer.R", sep = ''))
#source functions
#source(paste(getwd(), "/RunModel.R", sep = ''))
source(paste(getwd(), "/UpdateBehavior", sep = ''))
#Source function scripts
source(paste(directory, "/Source/FunctionSourcer.R", sep = ''))
#load necessary data
survey_data = read.table("Input/Cleaned up Coastal Tourist Combined Data - modified codes.csv", header=T, sep=",")
setwd("/Users/jannawilloughby/Google Drive/My Drive/Willoughby lab/projects - active/dolphins and turtles/demography_ed/")
#load necessary data
survey_data = read.table("Input/Cleaned up Coastal Tourist Combined Data - modified codes.csv", header=T, sep=",")
View(survey_data)
#load necessary data
survey_data = read.table("Input/Cleaned up Coastal Tourist Combined Data - modified codes.csv", header=T, sep=",")
survey_data$MeanKnowledge = rowMeans(survey_data[, c("Policy", "Wildlife")], na.rm = TRUE)
#list of variables to run regressions on, excluding 'Race', 'Hispanic', and 'Gender'
variables = c("Age", "ALResident", "Education", "Visitor", "Beach", "Turtleview", "Dolphinview", "Wildlifeview", "Fishbeach", "Fishjetty", "Fishboat", "Boatmotor", "Boatsail", "Angler")
#prepare a data frame to store results
results <- data.frame(Variable = character(),
Coefficient = numeric(),
P_Value = numeric(),
R_Squared = numeric())
results
#prepare a data frame to store results
results = data.frame(variable = character(), coefficient = numeric(), pvalue = numeric(), rsquared = numeric())
#loop through variables and perform regression
for (var in variables) {
formula = as.formula(paste("MeanKnowledge ~", var))
model = lm(formula, data = data)
summary_model = summary(model)
coef_model = coef(summary_model)[2, ]
results = rbind(results, data.frame(variable = var, coefficient = coef_model["Estimate"], pvalue = coef_model["Pr(>|t|)"], rsquared = summary_model$r.squared))
}
#prepare a data frame to store results
results = data.frame(variable = character(), coefficient = numeric(), pvalue = numeric(), rsquared = numeric())
#loop through variables and perform regression
for (var in variables) {
formula = as.formula(paste("MeanKnowledge ~", var))
model = lm(formula, data = survey_data)
summary_model = summary(model)
coef_model = coef(summary_model)[2, ]
results = rbind(results, data.frame(variable = var, coefficient = coef_model["Estimate"], pvalue = coef_model["Pr(>|t|)"], rsquared = summary_model$r.squared))
}
results
results[results$pvalue<0.05 & results$rsquared>0.05,]
results[results$pvalue<0.05 & results$rsquared>0.01,]
results[results$pvalue<0.05 & results$rsquared>0.02,]
filterresults = results[results$pvalue<0.05 & results$rsquared>0.02,]
filterlm = lm(MeanKnowledge ~ Age + Education + Beach + Turtleview + Dolphinview + Wildlifeview, data=survey_data)
summary(filterlm)
View(survey_data)
survey_data$MeanView = rowMeans(survey_data[, c("Turtleview", "Dolphinview", "Wildlifeview")], na.rm = TRUE)
#list of variables to run regressions on, excluding 'Race', 'Hispanic', and 'Gender'
variables = c("Age", "ALResident", "Education", "Visitor", "Beach", "MeanView", "Fishbeach", "Fishjetty", "Fishboat", "Boatmotor", "Boatsail", "Angler")
#prepare a data frame to store results
results = data.frame(variable = character(), coefficient = numeric(), pvalue = numeric(), rsquared = numeric())
#loop through variables and perform regression
for (var in variables) {
formula = as.formula(paste("MeanKnowledge ~", var))
model = lm(formula, data = survey_data)
summary_model = summary(model)
coef_model = coef(summary_model)[2, ]
results = rbind(results, data.frame(variable = var, coefficient = coef_model["Estimate"], pvalue = coef_model["Pr(>|t|)"], rsquared = summary_model$r.squared))
}
results
results[results$pvalue<0.05 & results$rsquared>0.02,]
filterresults = results[results$pvalue<0.05 & results$rsquared>0.02,]
filterlm = lm(MeanKnowledge~Age+Education+Beach+Turtleview+Dolphinview+Wildlifeview, data=survey_data)
summary(filterlm)
filterlm = lm(MeanKnowledge~Age+Education+Beach+MeanView, data=survey_data)
summary(filterlm)
results[results$pvalue<0.05 & results$rsquared>0.02,]
results[results$pvalue<0.05,]
#make sure it isn't garbage before we take coeffs into ABM
#residuals plot
plot(filterlm$residuals ~ filterlm$fitted.values,
xlab = "Fitted values",
ylab = "Residuals",
main = "Residuals vs Fitted")
abline(h = 0, col = "red")
#Q-Q plot for normality
qqnorm(filterlm$residuals, main = "Q-Q Plot of Residuals")
qqline(filterlm$residuals, col = "red")
#leverage plot
library(car)
influencePlot(filterlm, id.method = "identify", main = "Influence Plot", sub = "Circle size is proportional to Cook's distance")
#variance Inflation Factor to check for multicollinearity
vif(filterlm)
summary(filterlm)
Predictors <- function(survey_data) {
#list of variables to run regressions on, excluding 'Race', 'Hispanic', and 'Gender'
variables = c("Age", "ALResident", "Education", "Visitor", "Beach", "MeanView", "Fishbeach", "Fishjetty", "Fishboat", "Boatmotor", "Boatsail", "Angler")
#prepare a data frame to store results
results = data.frame(variable = character(), coefficient = numeric(), pvalue = numeric(), rsquared = numeric())
#loop through variables and perform regression
for (var in variables) {
formula = as.formula(paste("MeanKnowledge ~", var))
model = lm(formula, data = survey_data)
summary_model = summary(model)
coef_model = coef(summary_model)[2, ]
results = rbind(results, data.frame(variable = var, coefficient = coef_model["Estimate"], pvalue = coef_model["Pr(>|t|)"], rsquared = summary_model$r.squared))
}
#buid a single model
filterresults = results[results$pvalue<0.05 & results$rsquared>0.02,]
filterlm = lm(MeanKnowledge~Age+Education+Beach+MeanView, data=survey_data)
summary(filterlm)
return(summary(filterlm))
}
#make sure it isn't garbage before we take coeffs into ABM
#residuals plot
plot(filterlm$residuals ~ filterlm$fitted.values, xlab = "Fitted values", ylab = "Residuals",main = "Residuals vs Fitted")
abline(h = 0, col = "red")
#Q-Q plot for normality
qqnorm(filterlm$residuals, main = "Q-Q Plot of Residuals")
qqline(filterlm$residuals, col = "red")
#leverage plot
library(car)
influencePlot(filterlm, id.method = "identify", main = "Influence Plot", sub = "Circle size is proportional to Cook's distance")
#variance Inflation Factor to check for multicollinearity
vif(filterlm)
#add something for fish etc?
preds = Predictors(survey_data)
warnings()
preds
Predictors <- function(survey_data) {
#list of variables to run regressions on, excluding 'Race', 'Hispanic', and 'Gender'
variables = c("Age", "ALResident", "Education", "Visitor", "Beach", "MeanView", "Fishbeach", "Fishjetty", "Fishboat", "Boatmotor", "Boatsail", "Angler")
#prepare a data frame to store results
results = data.frame(variable = character(), coefficient = numeric(), pvalue = numeric(), rsquared = numeric())
#loop through variables and perform regression
for (var in variables) {
formula = as.formula(paste("MeanKnowledge ~", var))
model = lm(formula, data = survey_data)
summary_model = summary(model)
coef_model = coef(summary_model)[2, ]
results = rbind(results, data.frame(variable = var, coefficient = coef_model["Estimate"], pvalue = coef_model["Pr(>|t|)"], rsquared = summary_model$r.squared))
}
#buid a single model
filterresults = results[results$pvalue<0.05 & results$rsquared>0.02,]
filterlm = lm(MeanKnowledge~Age+Education+Beach+MeanView, data=survey_data)
summary(filterlm)
return(summary(filterlm))
}
# #make sure it isn't garbage before we take coeffs into ABM
# #residuals plot
# plot(filterlm$residuals ~ filterlm$fitted.values, xlab = "Fitted values", ylab = "Residuals",main = "Residuals vs Fitted")
# abline(h = 0, col = "red")
#
# #Q-Q plot for normality
# qqnorm(filterlm$residuals, main = "Q-Q Plot of Residuals")
# qqline(filterlm$residuals, col = "red")
#
# #leverage plot
# library(car)
# influencePlot(filterlm, id.method = "identify", main = "Influence Plot", sub = "Circle size is proportional to Cook's distance")
#
# #variance Inflation Factor to check for multicollinearity
# vif(filterlm)
#add something for fish etc?
preds = Predictors(survey_data)
View(agents)
#create agents from survey data and set initial knowledge level
agents = survey_data
head(survey_data)
survey_data$MeanFish = rowMeans(survey_data[, c("Fishbeach", "Fishjetty", "Fishboat")], na.rm = TRUE)
survey_data$Boat = rowMeans(survey_data[, c("Boatmotor", "Boatsail")], na.rm = TRUE)
#list of variables to run regressions on, excluding 'Race', 'Hispanic', and 'Gender'
variables = c("Age", "ALResident", "Education", "Visitor", "Beach", "MeanView", "MeanFish", "MeanBoat", "Angler")
#prepare a data frame to store results
results = data.frame(variable = character(), coefficient = numeric(), pvalue = numeric(), rsquared = numeric())
#loop through variables and perform regression
for (var in variables) {
formula = as.formula(paste("MeanKnowledge ~", var))
model = lm(formula, data = survey_data)
summary_model = summary(model)
coef_model = coef(summary_model)[2, ]
results = rbind(results, data.frame(variable = var, coefficient = coef_model["Estimate"], pvalue = coef_model["Pr(>|t|)"], rsquared = summary_model$r.squared))
}
#load necessary data
survey_data = read.table("Input/Cleaned up Coastal Tourist Combined Data - modified codes.csv", header=T, sep=",")
#add survey data modifications
survey_data$MeanKnowledge = rowMeans(survey_data[, c("Policy", "Wildlife")], na.rm = TRUE)
survey_data$MeanView = rowMeans(survey_data[, c("Turtleview", "Dolphinview", "Wildlifeview")], na.rm = TRUE)
survey_data$MeanFish = rowMeans(survey_data[, c("Fishbeach", "Fishjetty", "Fishboat")], na.rm = TRUE)
survey_data$MeanBoat = rowMeans(survey_data[, c("Boatmotor", "Boatsail")], na.rm = TRUE)
setwd("/Users/jannawilloughby/Google Drive/My Drive/Willoughby lab/projects - active/dolphins and turtles/demography_ed/")
#load necessary data
survey_data = read.table("Input/Cleaned up Coastal Tourist Combined Data - modified codes.csv", header=T, sep=",")
#add survey data modifications
survey_data$MeanKnowledge = rowMeans(survey_data[, c("Policy", "Wildlife")], na.rm = TRUE)
survey_data$MeanView = rowMeans(survey_data[, c("Turtleview", "Dolphinview", "Wildlifeview")], na.rm = TRUE)
survey_data$MeanFish = rowMeans(survey_data[, c("Fishbeach", "Fishjetty", "Fishboat")], na.rm = TRUE)
survey_data$MeanBoat = rowMeans(survey_data[, c("Boatmotor", "Boatsail")], na.rm = TRUE)
#list of variables to run regressions on, excluding 'Race', 'Hispanic', and 'Gender'
variables = c("Age", "ALResident", "Education", "Visitor", "Beach", "MeanView", "MeanFish", "MeanBoat", "Angler")
#prepare a data frame to store results
results = data.frame(variable = character(), coefficient = numeric(), pvalue = numeric(), rsquared = numeric())
#loop through variables and perform regression
for (var in variables) {
formula = as.formula(paste("MeanKnowledge ~", var))
model = lm(formula, data = survey_data)
summary_model = summary(model)
coef_model = coef(summary_model)[2, ]
results = rbind(results, data.frame(variable = var, coefficient = coef_model["Estimate"], pvalue = coef_model["Pr(>|t|)"], rsquared = summary_model$r.squared))
}
#buid a single model
filterresults = results[results$pvalue<0.05 & results$rsquared>0.02,]
results[results$pvalue<0.05 & results$rsquared>0.02,]
results
#list of variables to run regressions on, excluding 'Race', 'Hispanic', and 'Gender'
variables = c("Age", "Education", "Visitor", "Beach", "MeanView", "MeanFish", "MeanBoat", "Angler")
#prepare a data frame to store results
results = data.frame(variable = character(), coefficient = numeric(), pvalue = numeric(), rsquared = numeric())
#loop through variables and perform regression
for (var in variables) {
formula = as.formula(paste("MeanKnowledge ~", var))
model = lm(formula, data = survey_data)
summary_model = summary(model)
coef_model = coef(summary_model)[2, ]
results = rbind(results, data.frame(variable = var, coefficient = coef_model["Estimate"], pvalue = coef_model["Pr(>|t|)"], rsquared = summary_model$r.squared))
}
results
results[results$pvalue<0.05 & results$rsquared>0.02,]
results[results$pvalue<0.05,]
filterlm = lm(MeanKnowledge~Age+Education+Beach+MeanView+MeanFish+MeanBoat, data=survey_data)
summary(filterlm)
#list of variables to run regressions on, excluding 'Race', 'Hispanic', and 'Gender'
variables = c("Age", "ALResident", "Education", "Visitor", "Beach", "MeanView", "MeanFish", "MeanBoat", "Angler")
#prepare a data frame to store results
results = data.frame(variable = character(), coefficient = numeric(), pvalue = numeric(), rsquared = numeric())
#loop through variables and perform regression
for (var in variables) {
formula = as.formula(paste("MeanKnowledge ~", var))
model = lm(formula, data = survey_data)
summary_model = summary(model)
coef_model = coef(summary_model)[2, ]
results = rbind(results, data.frame(variable = var, coefficient = coef_model["Estimate"], pvalue = coef_model["Pr(>|t|)"], rsquared = summary_model$r.squared))
}
summary(results)
results
results[results$pvalue<0.05 & results$rsquared>0.02,]
